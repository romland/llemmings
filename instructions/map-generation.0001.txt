Using plain javascript and canvas, let's create a level that looks and act like the game Lemmings. 
Specifics are:
- randomly generated textures using some noise function, the most important here is that it looks smooth and colorful
- randomly generated map using some noise function - the map should be drawn on a 960x960 canvas - it should be easy to do collision detection against the generated map.
- we want to draw the map
- need to implement all the types of lemmings (blocker, bomber, floater etc)
- we also want to make sure the lemmings automatically move and collide on the map, we want one of each type spawned on the map at start

Instead of giving me the implementation to everything right away, generate prompts I can give to you in 
portions to eventually get a full implemention. We have to do it this way because of the context window size. 
After each time you replied to a prompt, you should tell me what I should ask from you next. Also tell me what code I would need to include, if any, to get an answer.


---------------------
Like the game Lemmings, I want to procedurally generate a random map of platforms which the lemmings walk on.
The platforms are made of dirt, background color is black, here and there there should be water.
Also come up with a solution to efficiently do collision detection between lemmings and the map.

The map should be drawn on a canvas using plain javascript. Give me only the code, no explanation is needed other 
than comments in the code.
----
>>>> another Prompt:
Like the game Lemmings, I want to procedurally generate a random map of platforms which the lemmings walk on.
The platforms are layered from top to bottom and are made of dirt, the background color is black, there is 
rock here and there. At the bottom there should water.
Use perlin noise with fractal brownian motion to generate the platforms and the rock. 
Make sure that we have some continuous platforms and not a map filled with randomness.

I'll draw an example map in ASCII:
|------------------------------------------|
|                  ####          ####      |
|  ================######       #######  # |
|                              ############|
|   ###      =========================#####|
|   ####                        ###########|
|   ####              =========== #########|
|   ####                           ########|
|   ###      =======================#######|
| ######                             ##### |
|%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%|

% is blue water
# is gray rock
| and - is canvas border
= is brown dirt platform

Just because the ASCII map is all squares, does not mean the elements of the map should be. In fact, the
map should look organic, mountainy and rough.

The API for the noise generator looks like this:
    const noiseGenerator = new ImprovedNoise();
    const noiseValue = noiseGenerator.noise(x * noiseScale * frequency, 0, 0) * 0.5 + 0.5;

The map should be drawn on a canvas using plain client-side javascript. Give me only the code, no explanation is needed other 
than comments in the code.


>>> Thought, ask GPT how it would go about describing how to draw a steep mountain like cliff top on a 2D canvas in one color

>>>> Another prompt (BUT I eventually gave up on this one -- there were too many things that could go wrong): 
Update the map generation below to not only give me platforms, but add steep cliff
walls here and there, these walls should only be placed on top of platforms and should have
a bit of randomly generated jagged edges. The cliff walls should be blue (0000ff), for now.
The cliff walls can be up to 3 platforms high. The cliff wall can be at a steepness of between
70-110 degrees, but it must still be a little jagged (jaggedness should be configurable), so
you can use the number as an approximate to convey the idea. Both sides of the cliff should
go upwards toward a peak. Each cliff wall must be between 40 and 100 pixels wide. The bottom
of the cliff can be flat as it is always resting on a platform. The polygon you use to draw
the cliff must be filled (not just an outline).

Note that we still want to keep the existing rock and dirt platforms, they are good as they are,
don't change them. Just add the cliff walls on top of them.

You might be best off splitting the generation of platforms and cliff-walls into two separate
sections as you keep on messing up your line-drawing.

Just give me the code, no need to explain anything, I just want to paste in the whole thing
with the cliff-wall solution in it. The cliffs must be separated by at least 100 pixels on the X axis.

// Set canvas dimensions and context
const canvas = document.querySelector('canvas');
canvas.width = 800;
canvas.height = 600;
const ctx = canvas.getContext('2d');

// Set constants for noise generation
const noiseGenerator = new ImprovedNoise();
let noiseScale = 0.15; // (hillyness) adjust this to change the amount of detail in the noise
const frequency = 2.5;

// Set constants for map generation
const numPlatforms = 10; // adjust this to change the number of platforms
const platformHeight = canvas.height / numPlatforms;
const maxPlatformWidth = canvas.width * 0.5; // adjust this to change maximum platform width
const minPlatformWidth = canvas.width * 0.2; // adjust this to change minimum platform width
const rockProbability = 0.3; // adjust this to change the chance of generating rocks
const waterColor = '#0077be';
const rockColor = '#888888';
const dirtColor = '#4a2e00';

// Generate list of platforms
const platforms = [];
for (let i = 0; i < numPlatforms; i++) {
  const halfWidth = (Math.random() * (maxPlatformWidth - minPlatformWidth) + minPlatformWidth) / 2;
  const x = Math.random() * (canvas.width - halfWidth * 2) + halfWidth;
  const y = (i * platformHeight + platformHeight / 2) + platformHeight;     // add platformHeight so we don't have one at the very top
  platforms.push({x, y, halfWidth});
}

function drawMap() {
  // Create gradient for background color
  const grd = ctx.createLinearGradient(0, 0, 0, canvas.height);
  grd.addColorStop(0, '#111111');
  grd.addColorStop(1, '#444444');
  ctx.fillStyle = grd;
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // Draw water at bottom of canvas
  ctx.fillStyle = waterColor;
  ctx.fillRect(0, canvas.height - platformHeight, canvas.width, platformHeight);
  
  // Generate map using Perlin noise
  for (let i = platforms.length - 1; i >= 0; i--) {
    const platform = platforms[i];
    
    // Generate noise values for each pixel on the platform
    ctx.beginPath();
    ctx.moveTo(platform.x - platform.halfWidth, platform.y);
    for (let x = platform.x - platform.halfWidth; x <= platform.x + platform.halfWidth; x++) {
      const noiseValue = noiseGenerator.noise(x * noiseScale * frequency, 0, 0) * 0.5 + 0.5;
      const height = platform.y - noiseValue * platformHeight / 1.5;    // platform height divisor
      
      // Determine whether to draw dirt or rock based on probability
      if (Math.random() < rockProbability) {
        ctx.fillStyle = rockColor;
      } else {
        ctx.fillStyle = dirtColor;
      }
      ctx.lineTo(x, height);
    }
    ctx.lineTo(platform.x + platform.halfWidth, platform.y);
    ctx.closePath();
    ctx.fill();
  }
}

// call drawMap function to generate map
drawMap();
