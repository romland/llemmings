Refactor the update function to instead of using multiple pixelIsColor(), use already implemented
isColorOneOf(needle, haystack), needle is the color we are searching for, and haystack can take 
multiple colors in an array (e.g. pass in both dirt and ground in one function call).
To get a pixel's color, use the already implemented function: getPixelColor(imageData, x, y)
This is declared for you to use: const terrainColorBytes = [ rockColorBytes, dirtColorBytes ]

If you have other ideas on how to clean it up but keeping functionality, please do so. Also give
me any functions you needed to create for that refactoring.

The update function is:
  update: function() {
    if (this.y >= canvas.height - (this.height + this.velY + 1)) {
      this.isDead = true;
      return;
    }

    // Check if ground is under us or not
    let isGroundUnderneath =
      pixelIsColor(oldImgData, this.x + this.width / 2, this.y + this.height + 1, dirtColorBytes) ||
      pixelIsColor(oldImgData, this.x + this.width / 2, this.y + this.height + 1, rockColorBytes);

    let heightAdjustment = 0;

    if (isGroundUnderneath) {
      let distanceToGround = -(this.height / 4);

      while (
        this.y + distanceToGround + 1 >= 0 &&
        this.y + distanceToGround + 1 < canvas.height &&
        !pixelIsColor(
          oldImgData,
          this.x + this.width / 2,
          this.y + distanceToGround + 1,
          dirtColorBytes
        ) &&
        !pixelIsColor(
          oldImgData,
          this.x + this.width / 2,
          this.y + distanceToGround + 1,
          rockColorBytes
        )
      ) {
        distanceToGround++;
      }

      if (distanceToGround !== 0) {
        heightAdjustment = this.height - distanceToGround + 0.1; // subtract half the sprite's height
      }
    }

    // Check if we hit a wall on the x axis
    const hitWallOnLeft = pixelIsColor(oldImgData, this.x - 1, this.y + this.height / 2, dirtColorBytes) ||
                          pixelIsColor(oldImgData, this.x - 1, this.y + this.height / 2, rockColorBytes);
    const hitWallOnRight =
      pixelIsColor(oldImgData, this.x + this.width + 1, this.y + this.height / 2, dirtColorBytes) ||
      pixelIsColor(oldImgData, this.x + this.width + 1, this.y + this.height / 2, rockColorBytes);

    // Check if we've fallen in water
    const isWaterBelow = pixelIsColor(oldImgData, this.x + this.width / 2, this.y + this.height + 1, waterColorBytes);

    // Determine if the lemming should climb
    let shouldClimb = false;
    if (this.action === "Climber" ) {
      if ((hitWallOnLeft && this.velX < 0) || (hitWallOnRight && this.velX > 0)) {
        shouldClimb = true;
      } else {
        this.isClimbing = false; // Reset climbing flag
      }
    }

    // Update velocity according to the collision rules
    if (!this.onGround) {
      if (this.action === "Floater") {
        this.velY += GRAVITY * 0.1;
      } else {
        this.velY += GRAVITY;
      }

      if (isGroundUnderneath) {
        if (this.velY > this.deadlyVelY) {
          // splat
          this.isDead = true;
          return;
        }
        this.onGround = true;
        this.velY = 0;
      }
    } else if (this.onGround && !isGroundUnderneath) {
      // Start falling if there's no ground
      this.onGround = false;
    }

    // ============ Digger/Basher/Miner code
    let digging = false;    // HUMAN
    if(this.action === "Digger" || this.action === "Miner" || this.action === "Basher") {   // HUMAN: added this if()
      digging = startDigging(this);   // HUMAN: assign result
    }
    // ============ /Digger/Basher/Miner code

    // Check if there are other lemmings that are blockers
    for (let i = 0; i < lemmings.length; i++) {
      const otherLemming = lemmings[i];

      if (
        otherLemming !== this &&
        !otherLemming.isDead &&
        otherLemming.action === "Blocker" &&
        this.x + this.width > otherLemming.x &&
        this.x < otherLemming.x + otherLemming.width &&
        this.y + this.height > otherLemming.y &&
        this.y < otherLemming.y + otherLemming.height
      ) {
        console.log("Ran into a blocker?", this.x, this.y);
        this.velX *= -1;
      }
    }

    // Handle climbing
    if (shouldClimb) {
      this.isClimbing = true;
      let climbDirection = hitWallOnLeft ? 1 : -1;
      this.x += climbDirection * this.maxVelX;
      this.y -= 1;

      this.velY = -VEL_CLIMB*0.05; // Start going up at climbing velocity
      this.onGround = false; // We've left the ground
    } else {
      // Not climbing, normal movement applies
      // HUMAN: added check for 'this.velY === 0' here so that we don't turn when we are falling
      // HUMAN: don't turn if digging
      if (!digging && this.velY === 0 && this.action !== "Climber" && (hitWallOnLeft || hitWallOnRight || this.x <= this.width || this.x >= canvas.width - this.width)) {
        this.velX *= -1;
      }

      if (isWaterBelow || this.y >= canvas.height - this.height) {
        this.isDead = true;
      }

      // Apply height adjustment
      if (heightAdjustment !== 0 && !this.isClimbing && !digging) { // only adjust if not climbing
        if (this.y - heightAdjustment >= 0) {
          this.y -= heightAdjustment; // move sprite up (HUMAN comment: gravity takes care of down)
        } else {
          this.isDead = true;
          return;
        }
      }

      // Check if this is a Bomber, and if so create a hole
      // TODO: Need to make nearby aliens die...
      if (this.action === "Bomber") {
        createHole(this.x, this.y + this.height);   // HUMAN CHEAT: added + this.height
        this.isDead = true;                         // HUMAN cheat: added "isDead" flag
        return;
      }

      // HUMAN: this if block to slow down when digging
      if (this.actionStarted && (this.action === "Basher" || this.action === "Digger" || this.action === "Miner")) {
        this.velX = (this.velX > 0 ? this.maxVelX * DIGGER_SPEED_FACTOR : -this.maxVelX * DIGGER_SPEED_FACTOR);
      } else {
        this.velX = (this.velX > 0 ? this.maxVelX : -this.maxVelX);
      }

      // Move the lemming
      this.x += this.velX;
      this.y += this.velY;
      this.age++;
    }
  },